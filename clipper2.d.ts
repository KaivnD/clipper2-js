// generated by TSEMBIND

// define type aliases for various native number types
type Char = number;
type SignedChar = number;
type UnsignedChar = number;
type Short = number;
type UnsignedShort = number;
type Int = number;
type UnsignedInt = number;
type Long = number;
type UnsignedLong = number;
type Float = number;
type Double = number;

export enum FillRule {
	EvenOdd = 0,
	NonZero = 1,
	Positive = 2,
	Negative = 3,
}
export class PathD {
constructor();
	push_back(arg0: unknown): void;
	resize(arg0: UnsignedLong, arg1: unknown): void;
	size(): UnsignedLong;
	get(arg0: UnsignedLong): any;
	set(arg0: UnsignedLong, arg1: unknown): boolean;
	delete(): void;
}
export class PathsD {
constructor();
	push_back(arg0: PathD): void;
	resize(arg0: UnsignedLong, arg1: PathD): void;
	size(): UnsignedLong;
	get(arg0: UnsignedLong): any;
	set(arg0: UnsignedLong, arg1: PathD): boolean;
	delete(): void;
}
export interface ClipperLib {
	union(arg0: PathsD, arg1: FillRule, arg2: Int): PathsD;
	makePathD(arg0: string): PathD;
	PathD: typeof PathD
	PathsD: typeof PathsD
	FillRule: typeof FillRule
}
declare function factory(): Promise<ClipperLib>;
export default factory;
